#!/usr/bin/env bash
#
# birthdayrem - 'birthday reminder'
# Take a list of birthdays in the format:
# "yyyy-mm-dd, [name]"
# Print the list in order from 'now'.
# Calculate a person's current age.
# LICENCE: GPL
# Hugh Carroll hughie@carrollonline.co.uk
# https://github.com/psaikido/birthdayrem

DATAFILE="$HOME/.config/birthdayrem/birthdays"
NAMEWIDTH=10
COLWIDTH=8

# Store 'now' as month and day with leading zeroes stripped.
TODAY=$(date +%Y-%m-%d)
THISYEAR=$(date +%Y)
THISMONTH=$(date +%m | sed 's/^0*//')
THISDAY=$(date +%d | sed 's/^0*//')

# Store the default IFS ('internal field separator')
# and replace it with an empty string.
# If we don't do this the lines break at commas.
OLD_IFS="$IFS"
IFS=$'\n'

# Calculate a person's current age or their age at the time they died.
howOld() {
	if [[ -n "$DIED" ]]; then
		# Test whether they died before their birthday.
		DY=$( printf '%s' $DIED | cut -d '-' -f1 )
		DM=$( printf '%s' $DIED | cut -d '-' -f2 | sed 's/^0*//' )
		DD=$( printf '%s' $DIED | cut -d '-' -f3 | sed 's/^0*//' )

		CALCYEAR=$DY

		if [[ (( $DM -lt $M )) ]]; then
			CALCYEAR=$(( $DY - 1))

		elif [[ (( $DM -eq $M)) ]]; then
			if [[ (( $DD -lt $D )) ]]; then
				CALCYEAR=$(( $DY - 1))
			fi
		fi

	else
		# Test whether it is before or after their birthday.
		if [[ (( $FUTURE -eq 1 )) ]]; then
			CALCYEAR=$(( $THISYEAR - 1 ))
		else
			CALCYEAR=$(( $THISYEAR ))
		fi
	fi

	AGE=$(( $CALCYEAR - $Y))
}

# Prettify the output.
formatOutput() {
	if [[ -n "$DIED" ]]; then
		LASTFIELD="-"
	else
		LASTFIELD=$(($AGE+1))
	fi

	FORMATTED=$(printf "%s %${NAMEWIDTH}s %${COLWIDTH}s %${COLWIDTH}s\n" "$DT" "$NAME" "$AGE" "$LASTFIELD")
}

# Output
output() {
	printf "%s %${NAMEWIDTH}s %${COLWIDTH}s %${COLWIDTH}s\n" "yyyy-mm-dd" "NAME" "AGE-NOW" "NEXT"
	printf "%s\n" "--------------------------------------" 
	for i in "${NEXT[@]}"; do
		echo "$i" 
	done
}

# Sort by month, then day, then year and store as an array.
BIRTHDAYS=( $(sort --field-separator=- -k2 -k3 -k1 $DATAFILE) )

declare -a BEFORE=()
declare -a AFTER=()

for b in "${BIRTHDAYS[@]}"; do
	# Separate and format the year, month and day.
	DT=$( printf '%s' $b | cut -d ',' -f1 )
	Y=$( printf '%s' $DT | cut -d '-' -f1 )
	M=$( printf '%s' $DT | cut -d '-' -f2 | sed 's/^0*//' )
	D=$( printf '%s' $DT | cut -d '-' -f3 | sed 's/^0*//' )

	# Store names and death dates if any.
	NAME=$( printf '%s' $b | cut -d ',' -f2 | sed 's/^ *//' )
	DIED=$( printf '%s' $b | cut -d ',' -f3 | sed 's/^ *//' )

	# Put birthday dates that are in the future of this year into
	# an 'after' array, others into a 'before' array.
	FUTURE=0

	if [[ (( $M -gt $THISMONTH )) ]]; then
		FUTURE=1
	elif [[ (( $M -eq $THISMONTH )) ]]; then
		# The day needs to be checked too
		if [[ (( $D -ge $THISDAY )) ]]; then
			FUTURE=1
		fi
	fi

	howOld
	formatOutput

	if [[ (( $FUTURE -eq 1 )) ]]; then
		AFTER[${#AFTER[@]}]="$FORMATTED"
	else
		BEFORE[${#BEFORE[@]}]="$FORMATTED"
	fi

done

# Merge the 'after' and 'before' arrays.
NEXT=("${AFTER[@]}" "${BEFORE[@]}")

# Output.
output

# Restore the IFS to default.
IFS="$OLD_IFS"
